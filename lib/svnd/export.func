#!/bin/bash
# "Download" a project from the Communications repository
#
# Variables Required: PROJECT_TYPE, PROJECT_NAME, CORE_VERSION, PROJECT_VERSION

# Make sure we can connect to the repo
req_var SVN_REPO

TYPE=$(drupal_get_project_type)
NAME=$(drupal_get_project_filename)
CORE=$(drupal_get_version_core)

# If we can't get the core from the drupal install, try the module
if [ -z "$CORE" ]; then
  CORE=$(drupal_get_project_version_core)
fi

# If these variables are not set, ask the user
if [ -z "$NAME" ]; then
  read -p "$PRE Project name: " NAME
fi
if [ -z "$CORE" ]; then
  read -p "$PRE Drupal core version: " CORE
fi

# Make sure all the variables are set
req_local TYPE
req_local NAME
req_local CORE

# Ask the user for the version to export
decho
VERSIONS=`svn list $SVN_REPO/drupal/${TYPE}s/$NAME/$CORE/tags`
VARR=$(echo $VERSIONS | tr " " "\n")
i=1
for V in $VARR; do
  V=${V/\//}
  ARR[$i]=$V
  echo "[$i] $V"
  ((i++))
done
decho
read -p "$PRE Select version: " VID

VERSION=${ARR[$VID]}
OLD_VER=$(drupal_get_project_version_full)

read -p "$PRE Remove version $OLD_VER and install version $VERSION (y/n)? " CONT
if [ "$CONT" == "y" ]; then
  TMPDIR="./.tmp_$TYPE"

  # If we are in another subversioned project, perform a full SVN replacement
  # on the project repository.
  echo "$PRE Removing current version..."
  if [ -d ".svn" ]; then
    svn update
    svn rm *
    svn commit -q -m "Updating $NAME: Removing old version."
    svn export --force $SVN_REPO/drupal/${TYPE}s/$NAME/$CORE/tags/$VERSION .
    svn add --force *
    svn commit -q -m "Updating $NAME: Installing new version ($VERSION)."
  # If this isn't a subversioned project, perform a simple 'cut n paste'
  else
    svn export --force $SVN_REPO/drupal/${TYPE}s/$NAME/$CORE/tags/$VERSION $TMPDIR
    sudo rm -Rv *
    sudo mv -fv $TMPDIR/* ./
    sudo rm -R $TMPDIR
  fi
fi
